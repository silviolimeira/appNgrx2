
$ npm uninstall -g cordova ionic
$ npm install -g codova ionic

$ ionic start myAPp blank

$ ionic cordova plugin add cordova-plugin-app-update
$ npm install @ionic-native/app-update

npm i @ngrx/store --save
npm i @ngrx/effects --save
npm i @ngrx/entity --save
npm i @ngrx/router-store --save
npm i @ngrx/store-devtools --save
npm i @ngrx/schematics --save

Items Feature

Define state
src/app/reducers/items.ts. It extends from EntityState in @ngrx/entity.

Create Actions
$ mkdir -p src/app/actions
$ touch src/app/actions/items.ts

Create reducers
    After defining the state and actions, we can
create reducers. For each action defined, the reducer function
needs to have login to handle it.

Add effects
    The actual login of loading items is implemented in the effect.
$ mkdir -p src/app/effects/
$ touch src/app/effects/items.ts

$ npm install angularfire2 firebase --save
ref: https://medium.com/letsboot/lets-learn-how-to-install-and-setup-angularfire2-4-0-135d72bb0a41

With the effect loadItems$, the action Load triggers actions LoadSucess or LoadFial
NOte: It's convention for variables of Observables to use $ as the name suffix

========

Top Stories Feature

Create the State, 
    The State is similar to the state for items
    $ ionic g module modules/topStories
    $ ionic g class modules/top-stories/reducer/topStories

Create Action,
    $ ionic g class modules/top-stories/action/topStories

Create Reducer
    $ ionic g class modules/top-stories/reducer/topStories
    note: already created when state created

    Pagination
        create State and reducer function for Pagination

        $ ionic g class modules/top-stories/reducer/pagination

Create effects
    The last piece is the effect to load ids of top stories.
    
    $ ionic g class modules/top-stories/effect/topStories

*** The reducer functions only
deal with a subset of global state. The global state is
a hierarchical composition of states at different levels.
It's common to have the file index.ts in directory
reducers to compose the state for a module.

$ ionic g class modules/top-stories/reducer/index

Selectors
    After finishing the states, actions and reducers, we
need to update the components to interact with the
store. Components get data from the store for the view
and may dispatch actions to the store. A component is
usually interested in a subset of the global state. We use
the selectors provided by NgRx to select states from the
store. Selectors are functions that define how to extract
data from the state. Selectors can be chained together
to reuse the selection logic. One important
characteristic of selector functions is that they
memorize results to avoid unnecessary computations.
Selector functions are tipically defined in the same file
as the #REDUCER# functions.

Update Components
    Create module components

    $ ionic g module components

Create component topStories
    $ ionic g component components/topStories

Create model items
    $ ionic g class models/items

InAppBrowser Plugin:    
$ ionic cordova plugin add cordova-plugin-inappbrowser --save
$ npm installâ€Š--save @ionic-native/in-app-browser 


